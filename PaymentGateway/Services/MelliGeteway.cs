//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.17929.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
public partial class MelliGeteway : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback CheckRequestStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback CheckRequestStatusWithRealTransactionDateTimeOperationCompleted;
    
    private System.Threading.SendOrPostCallback CheckRequestStatusExWithRealTransactionDateTimeOperationCompleted;
    
    private System.Threading.SendOrPostCallback CheckRequestStatusExOperationCompleted;
    
    private System.Threading.SendOrPostCallback PaymentUtilityOperationCompleted;
    
    private System.Threading.SendOrPostCallback PaymentUtilityAdditionalDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback PaymentUtilityOptionalParameterOperationCompleted;
    
    private System.Threading.SendOrPostCallback BillPaymentUtilityOperationCompleted;
    
    private System.Threading.SendOrPostCallback BatchTransferUtilityOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCommitReportByPageNumberOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCommitReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetTransactionReportOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetTransactionReportByPageNumberOperationCompleted;
    
    private System.Threading.SendOrPostCallback CalcTimeStampOperationCompleted;
    
    /// <remarks/>
    public MelliGeteway()
    {
        this.Url = "https://sadad.shaparak.ir/services/service.asmx";
    }
    
    /// <remarks/>
    public event CheckRequestStatusCompletedEventHandler CheckRequestStatusCompleted;
    
    /// <remarks/>
    public event CheckRequestStatusWithRealTransactionDateTimeCompletedEventHandler CheckRequestStatusWithRealTransactionDateTimeCompleted;
    
    /// <remarks/>
    public event CheckRequestStatusExWithRealTransactionDateTimeCompletedEventHandler CheckRequestStatusExWithRealTransactionDateTimeCompleted;
    
    /// <remarks/>
    public event CheckRequestStatusExCompletedEventHandler CheckRequestStatusExCompleted;
    
    /// <remarks/>
    public event PaymentUtilityCompletedEventHandler PaymentUtilityCompleted;
    
    /// <remarks/>
    public event PaymentUtilityAdditionalDataCompletedEventHandler PaymentUtilityAdditionalDataCompleted;
    
    /// <remarks/>
    public event PaymentUtilityOptionalParameterCompletedEventHandler PaymentUtilityOptionalParameterCompleted;
    
    /// <remarks/>
    public event BillPaymentUtilityCompletedEventHandler BillPaymentUtilityCompleted;
    
    /// <remarks/>
    public event BatchTransferUtilityCompletedEventHandler BatchTransferUtilityCompleted;
    
    /// <remarks/>
    public event GetCommitReportByPageNumberCompletedEventHandler GetCommitReportByPageNumberCompleted;
    
    /// <remarks/>
    public event GetCommitReportCompletedEventHandler GetCommitReportCompleted;
    
    /// <remarks/>
    public event GetTransactionReportCompletedEventHandler GetTransactionReportCompleted;
    
    /// <remarks/>
    public event GetTransactionReportByPageNumberCompletedEventHandler GetTransactionReportByPageNumberCompleted;
    
    /// <remarks/>
    public event CalcTimeStampCompletedEventHandler CalcTimeStampCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRequestStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int CheckRequestStatus(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, out string RetrievalRefNo, out string AppStatus) {
        object[] results = this.Invoke("CheckRequestStatus", new object[] {
                    OrderID,
                    AmountTrans,
                    CardAcqID,
                    TerminalID,
                    RequestKey,
                    TimeStamp,
                    FP});
        RetrievalRefNo = ((string)(results[1]));
        AppStatus = ((string)(results[2]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCheckRequestStatus(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CheckRequestStatus", new object[] {
                    OrderID,
                    AmountTrans,
                    CardAcqID,
                    TerminalID,
                    RequestKey,
                    TimeStamp,
                    FP}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndCheckRequestStatus(System.IAsyncResult asyncResult, out string RetrievalRefNo, out string AppStatus) {
        object[] results = this.EndInvoke(asyncResult);
        RetrievalRefNo = ((string)(results[1]));
        AppStatus = ((string)(results[2]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void CheckRequestStatusAsync(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP) {
        this.CheckRequestStatusAsync(OrderID, AmountTrans, CardAcqID, TerminalID, RequestKey, TimeStamp, FP, null);
    }
    
    /// <remarks/>
    public void CheckRequestStatusAsync(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, object userState) {
        if ((this.CheckRequestStatusOperationCompleted == null)) {
            this.CheckRequestStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRequestStatusOperationCompleted);
        }
        this.InvokeAsync("CheckRequestStatus", new object[] {
                    OrderID,
                    AmountTrans,
                    CardAcqID,
                    TerminalID,
                    RequestKey,
                    TimeStamp,
                    FP}, this.CheckRequestStatusOperationCompleted, userState);
    }
    
    private void OnCheckRequestStatusOperationCompleted(object arg) {
        if ((this.CheckRequestStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CheckRequestStatusCompleted(this, new CheckRequestStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRequestStatusWithRealTransactionDateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int CheckRequestStatusWithRealTransactionDateTime(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans, out string RetrivalRefNo, out string AppStatus, out string RealTransactionDateTime) {
        object[] results = this.Invoke("CheckRequestStatusWithRealTransactionDateTime", new object[] {
                    OrderID,
                    CardAcqID,
                    TerminalID,
                    TransactionKey,
                    RequestKey,
                    AmountTrans});
        RetrivalRefNo = ((string)(results[1]));
        AppStatus = ((string)(results[2]));
        RealTransactionDateTime = ((string)(results[3]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCheckRequestStatusWithRealTransactionDateTime(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CheckRequestStatusWithRealTransactionDateTime", new object[] {
                    OrderID,
                    CardAcqID,
                    TerminalID,
                    TransactionKey,
                    RequestKey,
                    AmountTrans}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndCheckRequestStatusWithRealTransactionDateTime(System.IAsyncResult asyncResult, out string RetrivalRefNo, out string AppStatus, out string RealTransactionDateTime) {
        object[] results = this.EndInvoke(asyncResult);
        RetrivalRefNo = ((string)(results[1]));
        AppStatus = ((string)(results[2]));
        RealTransactionDateTime = ((string)(results[3]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void CheckRequestStatusWithRealTransactionDateTimeAsync(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans) {
        this.CheckRequestStatusWithRealTransactionDateTimeAsync(OrderID, CardAcqID, TerminalID, TransactionKey, RequestKey, AmountTrans, null);
    }
    
    /// <remarks/>
    public void CheckRequestStatusWithRealTransactionDateTimeAsync(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans, object userState) {
        if ((this.CheckRequestStatusWithRealTransactionDateTimeOperationCompleted == null)) {
            this.CheckRequestStatusWithRealTransactionDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRequestStatusWithRealTransactionDateTimeOperationCompleted);
        }
        this.InvokeAsync("CheckRequestStatusWithRealTransactionDateTime", new object[] {
                    OrderID,
                    CardAcqID,
                    TerminalID,
                    TransactionKey,
                    RequestKey,
                    AmountTrans}, this.CheckRequestStatusWithRealTransactionDateTimeOperationCompleted, userState);
    }
    
    private void OnCheckRequestStatusWithRealTransactionDateTimeOperationCompleted(object arg) {
        if ((this.CheckRequestStatusWithRealTransactionDateTimeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CheckRequestStatusWithRealTransactionDateTimeCompleted(this, new CheckRequestStatusWithRealTransactionDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRequestStatusExWithRealTransactionDateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int CheckRequestStatusExWithRealTransactionDateTime(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, out string RetrievalRefNo, out string AppStatus, out string RealTransactionDateTime) {
        object[] results = this.Invoke("CheckRequestStatusExWithRealTransactionDateTime", new object[] {
                    OrderID,
                    AmountTrans,
                    CardAcqID,
                    TerminalID,
                    RequestKey,
                    TimeStamp,
                    FP});
        RetrievalRefNo = ((string)(results[1]));
        AppStatus = ((string)(results[2]));
        RealTransactionDateTime = ((string)(results[3]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCheckRequestStatusExWithRealTransactionDateTime(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CheckRequestStatusExWithRealTransactionDateTime", new object[] {
                    OrderID,
                    AmountTrans,
                    CardAcqID,
                    TerminalID,
                    RequestKey,
                    TimeStamp,
                    FP}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndCheckRequestStatusExWithRealTransactionDateTime(System.IAsyncResult asyncResult, out string RetrievalRefNo, out string AppStatus, out string RealTransactionDateTime) {
        object[] results = this.EndInvoke(asyncResult);
        RetrievalRefNo = ((string)(results[1]));
        AppStatus = ((string)(results[2]));
        RealTransactionDateTime = ((string)(results[3]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void CheckRequestStatusExWithRealTransactionDateTimeAsync(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP) {
        this.CheckRequestStatusExWithRealTransactionDateTimeAsync(OrderID, AmountTrans, CardAcqID, TerminalID, RequestKey, TimeStamp, FP, null);
    }
    
    /// <remarks/>
    public void CheckRequestStatusExWithRealTransactionDateTimeAsync(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, object userState) {
        if ((this.CheckRequestStatusExWithRealTransactionDateTimeOperationCompleted == null)) {
            this.CheckRequestStatusExWithRealTransactionDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRequestStatusExWithRealTransactionDateTimeOperationCompleted);
        }
        this.InvokeAsync("CheckRequestStatusExWithRealTransactionDateTime", new object[] {
                    OrderID,
                    AmountTrans,
                    CardAcqID,
                    TerminalID,
                    RequestKey,
                    TimeStamp,
                    FP}, this.CheckRequestStatusExWithRealTransactionDateTimeOperationCompleted, userState);
    }
    
    private void OnCheckRequestStatusExWithRealTransactionDateTimeOperationCompleted(object arg) {
        if ((this.CheckRequestStatusExWithRealTransactionDateTimeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CheckRequestStatusExWithRealTransactionDateTimeCompleted(this, new CheckRequestStatusExWithRealTransactionDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRequestStatusEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int CheckRequestStatusEx(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, out string RetrievalRefNo, out string AppStatus) {
        object[] results = this.Invoke("CheckRequestStatusEx", new object[] {
                    OrderID,
                    AmountTrans,
                    CardAcqID,
                    TerminalID,
                    RequestKey,
                    TimeStamp,
                    FP});
        RetrievalRefNo = ((string)(results[1]));
        AppStatus = ((string)(results[2]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCheckRequestStatusEx(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CheckRequestStatusEx", new object[] {
                    OrderID,
                    AmountTrans,
                    CardAcqID,
                    TerminalID,
                    RequestKey,
                    TimeStamp,
                    FP}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndCheckRequestStatusEx(System.IAsyncResult asyncResult, out string RetrievalRefNo, out string AppStatus) {
        object[] results = this.EndInvoke(asyncResult);
        RetrievalRefNo = ((string)(results[1]));
        AppStatus = ((string)(results[2]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void CheckRequestStatusExAsync(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP) {
        this.CheckRequestStatusExAsync(OrderID, AmountTrans, CardAcqID, TerminalID, RequestKey, TimeStamp, FP, null);
    }
    
    /// <remarks/>
    public void CheckRequestStatusExAsync(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, object userState) {
        if ((this.CheckRequestStatusExOperationCompleted == null)) {
            this.CheckRequestStatusExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRequestStatusExOperationCompleted);
        }
        this.InvokeAsync("CheckRequestStatusEx", new object[] {
                    OrderID,
                    AmountTrans,
                    CardAcqID,
                    TerminalID,
                    RequestKey,
                    TimeStamp,
                    FP}, this.CheckRequestStatusExOperationCompleted, userState);
    }
    
    private void OnCheckRequestStatusExOperationCompleted(object arg) {
        if ((this.CheckRequestStatusExCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CheckRequestStatusExCompleted(this, new CheckRequestStatusExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PaymentUtility", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string PaymentUtility(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, out string RequestKey) {
        object[] results = this.Invoke("PaymentUtility", new object[] {
                    CardAcqID,
                    AmountTrans,
                    OrderId,
                    transactionKey,
                    TerminalId,
                    RedirectURL});
        RequestKey = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPaymentUtility(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PaymentUtility", new object[] {
                    CardAcqID,
                    AmountTrans,
                    OrderId,
                    transactionKey,
                    TerminalId,
                    RedirectURL}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndPaymentUtility(System.IAsyncResult asyncResult, out string RequestKey) {
        object[] results = this.EndInvoke(asyncResult);
        RequestKey = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void PaymentUtilityAsync(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL) {
        this.PaymentUtilityAsync(CardAcqID, AmountTrans, OrderId, transactionKey, TerminalId, RedirectURL, null);
    }
    
    /// <remarks/>
    public void PaymentUtilityAsync(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, object userState) {
        if ((this.PaymentUtilityOperationCompleted == null)) {
            this.PaymentUtilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentUtilityOperationCompleted);
        }
        this.InvokeAsync("PaymentUtility", new object[] {
                    CardAcqID,
                    AmountTrans,
                    OrderId,
                    transactionKey,
                    TerminalId,
                    RedirectURL}, this.PaymentUtilityOperationCompleted, userState);
    }
    
    private void OnPaymentUtilityOperationCompleted(object arg) {
        if ((this.PaymentUtilityCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PaymentUtilityCompleted(this, new PaymentUtilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PaymentUtilityAdditionalData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string PaymentUtilityAdditionalData(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData, out string RequestKey) {
        object[] results = this.Invoke("PaymentUtilityAdditionalData", new object[] {
                    CardAcqID,
                    AmountTrans,
                    OrderId,
                    transactionKey,
                    TerminalId,
                    RedirectURL,
                    MerchantAdditionalData});
        RequestKey = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPaymentUtilityAdditionalData(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PaymentUtilityAdditionalData", new object[] {
                    CardAcqID,
                    AmountTrans,
                    OrderId,
                    transactionKey,
                    TerminalId,
                    RedirectURL,
                    MerchantAdditionalData}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndPaymentUtilityAdditionalData(System.IAsyncResult asyncResult, out string RequestKey) {
        object[] results = this.EndInvoke(asyncResult);
        RequestKey = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void PaymentUtilityAdditionalDataAsync(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData) {
        this.PaymentUtilityAdditionalDataAsync(CardAcqID, AmountTrans, OrderId, transactionKey, TerminalId, RedirectURL, MerchantAdditionalData, null);
    }
    
    /// <remarks/>
    public void PaymentUtilityAdditionalDataAsync(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData, object userState) {
        if ((this.PaymentUtilityAdditionalDataOperationCompleted == null)) {
            this.PaymentUtilityAdditionalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentUtilityAdditionalDataOperationCompleted);
        }
        this.InvokeAsync("PaymentUtilityAdditionalData", new object[] {
                    CardAcqID,
                    AmountTrans,
                    OrderId,
                    transactionKey,
                    TerminalId,
                    RedirectURL,
                    MerchantAdditionalData}, this.PaymentUtilityAdditionalDataOperationCompleted, userState);
    }
    
    private void OnPaymentUtilityAdditionalDataOperationCompleted(object arg) {
        if ((this.PaymentUtilityAdditionalDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PaymentUtilityAdditionalDataCompleted(this, new PaymentUtilityAdditionalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PaymentUtilityOptionalParameter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string PaymentUtilityOptionalParameter(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, string OptionalPaymentParameter, out string RequestKey) {
        object[] results = this.Invoke("PaymentUtilityOptionalParameter", new object[] {
                    CardAcqID,
                    AmountTrans,
                    OrderId,
                    transactionKey,
                    TerminalId,
                    RedirectURL,
                    MerchantAdditionalData,
                    CustomerEmailAddress,
                    OptionalPaymentParameter});
        RequestKey = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPaymentUtilityOptionalParameter(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, string OptionalPaymentParameter, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PaymentUtilityOptionalParameter", new object[] {
                    CardAcqID,
                    AmountTrans,
                    OrderId,
                    transactionKey,
                    TerminalId,
                    RedirectURL,
                    MerchantAdditionalData,
                    CustomerEmailAddress,
                    OptionalPaymentParameter}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndPaymentUtilityOptionalParameter(System.IAsyncResult asyncResult, out string RequestKey) {
        object[] results = this.EndInvoke(asyncResult);
        RequestKey = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void PaymentUtilityOptionalParameterAsync(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, string OptionalPaymentParameter) {
        this.PaymentUtilityOptionalParameterAsync(CardAcqID, AmountTrans, OrderId, transactionKey, TerminalId, RedirectURL, MerchantAdditionalData, CustomerEmailAddress, OptionalPaymentParameter, null);
    }
    
    /// <remarks/>
    public void PaymentUtilityOptionalParameterAsync(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, string OptionalPaymentParameter, object userState) {
        if ((this.PaymentUtilityOptionalParameterOperationCompleted == null)) {
            this.PaymentUtilityOptionalParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentUtilityOptionalParameterOperationCompleted);
        }
        this.InvokeAsync("PaymentUtilityOptionalParameter", new object[] {
                    CardAcqID,
                    AmountTrans,
                    OrderId,
                    transactionKey,
                    TerminalId,
                    RedirectURL,
                    MerchantAdditionalData,
                    CustomerEmailAddress,
                    OptionalPaymentParameter}, this.PaymentUtilityOptionalParameterOperationCompleted, userState);
    }
    
    private void OnPaymentUtilityOptionalParameterOperationCompleted(object arg) {
        if ((this.PaymentUtilityOptionalParameterCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PaymentUtilityOptionalParameterCompleted(this, new PaymentUtilityOptionalParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BillPaymentUtility", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string BillPaymentUtility(string CardAcqID, long OrderId, string transactionKey, string BillList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, out string RequestKey) {
        object[] results = this.Invoke("BillPaymentUtility", new object[] {
                    CardAcqID,
                    OrderId,
                    transactionKey,
                    BillList,
                    TerminalId,
                    RedirectURL,
                    MerchantAdditionalData,
                    CustomerEmailAddress});
        RequestKey = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBillPaymentUtility(string CardAcqID, long OrderId, string transactionKey, string BillList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BillPaymentUtility", new object[] {
                    CardAcqID,
                    OrderId,
                    transactionKey,
                    BillList,
                    TerminalId,
                    RedirectURL,
                    MerchantAdditionalData,
                    CustomerEmailAddress}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndBillPaymentUtility(System.IAsyncResult asyncResult, out string RequestKey) {
        object[] results = this.EndInvoke(asyncResult);
        RequestKey = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void BillPaymentUtilityAsync(string CardAcqID, long OrderId, string transactionKey, string BillList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress) {
        this.BillPaymentUtilityAsync(CardAcqID, OrderId, transactionKey, BillList, TerminalId, RedirectURL, MerchantAdditionalData, CustomerEmailAddress, null);
    }
    
    /// <remarks/>
    public void BillPaymentUtilityAsync(string CardAcqID, long OrderId, string transactionKey, string BillList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, object userState) {
        if ((this.BillPaymentUtilityOperationCompleted == null)) {
            this.BillPaymentUtilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBillPaymentUtilityOperationCompleted);
        }
        this.InvokeAsync("BillPaymentUtility", new object[] {
                    CardAcqID,
                    OrderId,
                    transactionKey,
                    BillList,
                    TerminalId,
                    RedirectURL,
                    MerchantAdditionalData,
                    CustomerEmailAddress}, this.BillPaymentUtilityOperationCompleted, userState);
    }
    
    private void OnBillPaymentUtilityOperationCompleted(object arg) {
        if ((this.BillPaymentUtilityCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.BillPaymentUtilityCompleted(this, new BillPaymentUtilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BatchTransferUtility", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string BatchTransferUtility(string CardAcqID, string transactionKey, string CardList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, out string RequestKey) {
        object[] results = this.Invoke("BatchTransferUtility", new object[] {
                    CardAcqID,
                    transactionKey,
                    CardList,
                    TerminalId,
                    RedirectURL,
                    MerchantAdditionalData,
                    CustomerEmailAddress});
        RequestKey = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBatchTransferUtility(string CardAcqID, string transactionKey, string CardList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BatchTransferUtility", new object[] {
                    CardAcqID,
                    transactionKey,
                    CardList,
                    TerminalId,
                    RedirectURL,
                    MerchantAdditionalData,
                    CustomerEmailAddress}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndBatchTransferUtility(System.IAsyncResult asyncResult, out string RequestKey) {
        object[] results = this.EndInvoke(asyncResult);
        RequestKey = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void BatchTransferUtilityAsync(string CardAcqID, string transactionKey, string CardList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress) {
        this.BatchTransferUtilityAsync(CardAcqID, transactionKey, CardList, TerminalId, RedirectURL, MerchantAdditionalData, CustomerEmailAddress, null);
    }
    
    /// <remarks/>
    public void BatchTransferUtilityAsync(string CardAcqID, string transactionKey, string CardList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, object userState) {
        if ((this.BatchTransferUtilityOperationCompleted == null)) {
            this.BatchTransferUtilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchTransferUtilityOperationCompleted);
        }
        this.InvokeAsync("BatchTransferUtility", new object[] {
                    CardAcqID,
                    transactionKey,
                    CardList,
                    TerminalId,
                    RedirectURL,
                    MerchantAdditionalData,
                    CustomerEmailAddress}, this.BatchTransferUtilityOperationCompleted, userState);
    }
    
    private void OnBatchTransferUtilityOperationCompleted(object arg) {
        if ((this.BatchTransferUtilityCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.BatchTransferUtilityCompleted(this, new BatchTransferUtilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCommitReportByPageNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetCommitReportByPageNumber(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, int PageNumber, out int TotalPage, out string XMLReportSchema) {
        object[] results = this.Invoke("GetCommitReportByPageNumber", new object[] {
                    MerchantId,
                    Terminal,
                    TimeStamp,
                    FP,
                    FromShamsiDate,
                    ToShamsiDate,
                    FromHour,
                    ToHour,
                    TraceNo,
                    Amount,
                    OrderId,
                    PageNumber});
        TotalPage = ((int)(results[1]));
        XMLReportSchema = ((string)(results[2]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCommitReportByPageNumber(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, int PageNumber, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCommitReportByPageNumber", new object[] {
                    MerchantId,
                    Terminal,
                    TimeStamp,
                    FP,
                    FromShamsiDate,
                    ToShamsiDate,
                    FromHour,
                    ToHour,
                    TraceNo,
                    Amount,
                    OrderId,
                    PageNumber}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetCommitReportByPageNumber(System.IAsyncResult asyncResult, out int TotalPage, out string XMLReportSchema) {
        object[] results = this.EndInvoke(asyncResult);
        TotalPage = ((int)(results[1]));
        XMLReportSchema = ((string)(results[2]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetCommitReportByPageNumberAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, int PageNumber) {
        this.GetCommitReportByPageNumberAsync(MerchantId, Terminal, TimeStamp, FP, FromShamsiDate, ToShamsiDate, FromHour, ToHour, TraceNo, Amount, OrderId, PageNumber, null);
    }
    
    /// <remarks/>
    public void GetCommitReportByPageNumberAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, int PageNumber, object userState) {
        if ((this.GetCommitReportByPageNumberOperationCompleted == null)) {
            this.GetCommitReportByPageNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommitReportByPageNumberOperationCompleted);
        }
        this.InvokeAsync("GetCommitReportByPageNumber", new object[] {
                    MerchantId,
                    Terminal,
                    TimeStamp,
                    FP,
                    FromShamsiDate,
                    ToShamsiDate,
                    FromHour,
                    ToHour,
                    TraceNo,
                    Amount,
                    OrderId,
                    PageNumber}, this.GetCommitReportByPageNumberOperationCompleted, userState);
    }
    
    private void OnGetCommitReportByPageNumberOperationCompleted(object arg) {
        if ((this.GetCommitReportByPageNumberCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCommitReportByPageNumberCompleted(this, new GetCommitReportByPageNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCommitReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetCommitReport(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, out string XMLReportSchema) {
        object[] results = this.Invoke("GetCommitReport", new object[] {
                    MerchantId,
                    Terminal,
                    TimeStamp,
                    FP,
                    FromShamsiDate,
                    ToShamsiDate,
                    FromHour,
                    ToHour,
                    TraceNo,
                    Amount,
                    OrderId});
        XMLReportSchema = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCommitReport(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCommitReport", new object[] {
                    MerchantId,
                    Terminal,
                    TimeStamp,
                    FP,
                    FromShamsiDate,
                    ToShamsiDate,
                    FromHour,
                    ToHour,
                    TraceNo,
                    Amount,
                    OrderId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetCommitReport(System.IAsyncResult asyncResult, out string XMLReportSchema) {
        object[] results = this.EndInvoke(asyncResult);
        XMLReportSchema = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetCommitReportAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId) {
        this.GetCommitReportAsync(MerchantId, Terminal, TimeStamp, FP, FromShamsiDate, ToShamsiDate, FromHour, ToHour, TraceNo, Amount, OrderId, null);
    }
    
    /// <remarks/>
    public void GetCommitReportAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, object userState) {
        if ((this.GetCommitReportOperationCompleted == null)) {
            this.GetCommitReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommitReportOperationCompleted);
        }
        this.InvokeAsync("GetCommitReport", new object[] {
                    MerchantId,
                    Terminal,
                    TimeStamp,
                    FP,
                    FromShamsiDate,
                    ToShamsiDate,
                    FromHour,
                    ToHour,
                    TraceNo,
                    Amount,
                    OrderId}, this.GetCommitReportOperationCompleted, userState);
    }
    
    private void OnGetCommitReportOperationCompleted(object arg) {
        if ((this.GetCommitReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCommitReportCompleted(this, new GetCommitReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransactionReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetTransactionReport(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, out string XMLReportSchema) {
        object[] results = this.Invoke("GetTransactionReport", new object[] {
                    MerchantId,
                    Terminal,
                    TimeStamp,
                    FP,
                    ShamsiDate});
        XMLReportSchema = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetTransactionReport(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetTransactionReport", new object[] {
                    MerchantId,
                    Terminal,
                    TimeStamp,
                    FP,
                    ShamsiDate}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetTransactionReport(System.IAsyncResult asyncResult, out string XMLReportSchema) {
        object[] results = this.EndInvoke(asyncResult);
        XMLReportSchema = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetTransactionReportAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate) {
        this.GetTransactionReportAsync(MerchantId, Terminal, TimeStamp, FP, ShamsiDate, null);
    }
    
    /// <remarks/>
    public void GetTransactionReportAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, object userState) {
        if ((this.GetTransactionReportOperationCompleted == null)) {
            this.GetTransactionReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionReportOperationCompleted);
        }
        this.InvokeAsync("GetTransactionReport", new object[] {
                    MerchantId,
                    Terminal,
                    TimeStamp,
                    FP,
                    ShamsiDate}, this.GetTransactionReportOperationCompleted, userState);
    }
    
    private void OnGetTransactionReportOperationCompleted(object arg) {
        if ((this.GetTransactionReportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetTransactionReportCompleted(this, new GetTransactionReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransactionReportByPageNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetTransactionReportByPageNumber(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, int PageNumber, out int TotalPage, out string XMLReportSchema) {
        object[] results = this.Invoke("GetTransactionReportByPageNumber", new object[] {
                    MerchantId,
                    Terminal,
                    TimeStamp,
                    FP,
                    ShamsiDate,
                    PageNumber});
        TotalPage = ((int)(results[1]));
        XMLReportSchema = ((string)(results[2]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetTransactionReportByPageNumber(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, int PageNumber, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetTransactionReportByPageNumber", new object[] {
                    MerchantId,
                    Terminal,
                    TimeStamp,
                    FP,
                    ShamsiDate,
                    PageNumber}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetTransactionReportByPageNumber(System.IAsyncResult asyncResult, out int TotalPage, out string XMLReportSchema) {
        object[] results = this.EndInvoke(asyncResult);
        TotalPage = ((int)(results[1]));
        XMLReportSchema = ((string)(results[2]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetTransactionReportByPageNumberAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, int PageNumber) {
        this.GetTransactionReportByPageNumberAsync(MerchantId, Terminal, TimeStamp, FP, ShamsiDate, PageNumber, null);
    }
    
    /// <remarks/>
    public void GetTransactionReportByPageNumberAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, int PageNumber, object userState) {
        if ((this.GetTransactionReportByPageNumberOperationCompleted == null)) {
            this.GetTransactionReportByPageNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionReportByPageNumberOperationCompleted);
        }
        this.InvokeAsync("GetTransactionReportByPageNumber", new object[] {
                    MerchantId,
                    Terminal,
                    TimeStamp,
                    FP,
                    ShamsiDate,
                    PageNumber}, this.GetTransactionReportByPageNumberOperationCompleted, userState);
    }
    
    private void OnGetTransactionReportByPageNumberOperationCompleted(object arg) {
        if ((this.GetTransactionReportByPageNumberCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetTransactionReportByPageNumberCompleted(this, new GetTransactionReportByPageNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CalcTimeStamp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string CalcTimeStamp() {
        object[] results = this.Invoke("CalcTimeStamp", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCalcTimeStamp(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CalcTimeStamp", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndCalcTimeStamp(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CalcTimeStampAsync() {
        this.CalcTimeStampAsync(null);
    }
    
    /// <remarks/>
    public void CalcTimeStampAsync(object userState) {
        if ((this.CalcTimeStampOperationCompleted == null)) {
            this.CalcTimeStampOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalcTimeStampOperationCompleted);
        }
        this.InvokeAsync("CalcTimeStamp", new object[0], this.CalcTimeStampOperationCompleted, userState);
    }
    
    private void OnCalcTimeStampOperationCompleted(object arg) {
        if ((this.CalcTimeStampCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CalcTimeStampCompleted(this, new CalcTimeStampCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void CheckRequestStatusCompletedEventHandler(object sender, CheckRequestStatusCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CheckRequestStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CheckRequestStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string RetrievalRefNo {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string AppStatus {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void CheckRequestStatusWithRealTransactionDateTimeCompletedEventHandler(object sender, CheckRequestStatusWithRealTransactionDateTimeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CheckRequestStatusWithRealTransactionDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CheckRequestStatusWithRealTransactionDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string RetrivalRefNo {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string AppStatus {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public string RealTransactionDateTime {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[3]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void CheckRequestStatusExWithRealTransactionDateTimeCompletedEventHandler(object sender, CheckRequestStatusExWithRealTransactionDateTimeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CheckRequestStatusExWithRealTransactionDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CheckRequestStatusExWithRealTransactionDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string RetrievalRefNo {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string AppStatus {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public string RealTransactionDateTime {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[3]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void CheckRequestStatusExCompletedEventHandler(object sender, CheckRequestStatusExCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CheckRequestStatusExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CheckRequestStatusExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string RetrievalRefNo {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string AppStatus {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void PaymentUtilityCompletedEventHandler(object sender, PaymentUtilityCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PaymentUtilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PaymentUtilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string RequestKey {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void PaymentUtilityAdditionalDataCompletedEventHandler(object sender, PaymentUtilityAdditionalDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PaymentUtilityAdditionalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PaymentUtilityAdditionalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string RequestKey {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void PaymentUtilityOptionalParameterCompletedEventHandler(object sender, PaymentUtilityOptionalParameterCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PaymentUtilityOptionalParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PaymentUtilityOptionalParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string RequestKey {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void BillPaymentUtilityCompletedEventHandler(object sender, BillPaymentUtilityCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class BillPaymentUtilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal BillPaymentUtilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string RequestKey {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void BatchTransferUtilityCompletedEventHandler(object sender, BatchTransferUtilityCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class BatchTransferUtilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal BatchTransferUtilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string RequestKey {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void GetCommitReportByPageNumberCompletedEventHandler(object sender, GetCommitReportByPageNumberCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCommitReportByPageNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCommitReportByPageNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public int TotalPage {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string XMLReportSchema {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void GetCommitReportCompletedEventHandler(object sender, GetCommitReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCommitReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCommitReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string XMLReportSchema {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void GetTransactionReportCompletedEventHandler(object sender, GetTransactionReportCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetTransactionReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetTransactionReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string XMLReportSchema {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void GetTransactionReportByPageNumberCompletedEventHandler(object sender, GetTransactionReportByPageNumberCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetTransactionReportByPageNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetTransactionReportByPageNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public int TotalPage {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string XMLReportSchema {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void CalcTimeStampCompletedEventHandler(object sender, CalcTimeStampCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CalcTimeStampCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CalcTimeStampCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
